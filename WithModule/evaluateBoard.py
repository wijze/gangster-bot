import chess

def evaluate_board(board):
    balance = 0

    balance += get_piece_type_total_value(board.pawns & board.occupied_co[chess.WHITE], pawn_placement_values,100)
    
    return balance

def get_piece_type_total_value(board, piece_type):
    total = 0

    placement_values = piece_placement_values[piece_type]
    piece_value = piece_values[piece_type]

    n = 0
    while placements:
        last_bit = placements & 1
        if(last_bit):
            total += placement_values[n]
            total += piece_value
        n+=1
        placements = placements >> 1

    return total




piece_placement_values = {
    0:{
        True:[
            0, 0, 0, 0, 0, 0, 0, 0, 
            5, 10, 10, -20, -20, 10, 10, 5, 
            5, -5, -10, 0, 0, -10, -5, 5, 
            0, 0, 0, 20, 20, 0, 0, 0, 
            5, 5, 10, 25, 25, 10, 5, 5, 
            10, 10, 20, 30, 30, 20, 10, 10, 
            50, 50, 50, 50, 50, 50, 50, 50, 
            0, 0, 0, 0, 0, 0, 0, 0
        ],
        False:[ 
            0,  0,  0,  0,  0,  0,  0,  0,
            50, 50, 50, 50, 50, 50, 50, 50,
            10, 10, 20, 30, 30, 20, 10, 10,
            5,  5, 10, 25, 25, 10,  5,  5,
            0,  0,  0, 20, 20,  0,  0,  0,
            5, -5,-10,  0,  0,-10, -5,  5,
            5, 10, 10,-20,-20, 10, 10,  5,
            0,  0,  0,  0,  0,  0,  0,  0
        ]
    },
    1:[
        -50,-40,-30,-30,-30,-30,-40,-50,
        -40,-20,  0,  0,  0,  0,-20,-40,
        -30,  0, 10, 15, 15, 10,  0,-30,
        -30,  5, 15, 20, 20, 15,  5,-30,
        -30,  0, 15, 20, 20, 15,  0,-30,
        -30,  5, 10, 15, 15, 10,  5,-30,
        -40,-20,  0,  5,  5,  0,-20,-40,
        -50,-40,-30,-30,-30,-30,-40,-50,
    ],
    2:[
        -20,-10,-10,-10,-10,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5, 10, 10,  5,  0,-10,
        -10,  5,  5, 10, 10,  5,  5,-10,
        -10,  0, 10, 10, 10, 10,  0,-10,
        -10, 10, 10, 10, 10, 10, 10,-10,
        -10,  5,  0,  0,  0,  0,  5,-10,
        -20,-10,-10,-10,-10,-10,-10,-20,
    ],
    3:[
         0,  0,  0,  0,  0,  0,  0,  0,
         5, 10, 10, 10, 10, 10, 10,  5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
         0,  0,  0,  5,  5,  0,  0,  0
    ],
    4:[
        -20,-10,-10, -5, -5,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5,  5,  5,  5,  0,-10,
         -5,  0,  5,  5,  5,  5,  0, -5,
          0,  0,  5,  5,  5,  5,  0, -5,
        -10,  5,  5,  5,  5,  5,  0,-10,
        -10,  0,  5,  0,  0,  0,  0,-10,
        -20,-10,-10, -5, -5,-10,-10,-20
    ],
    5:[
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -20,-30,-30,-40,-40,-30,-30,-20,
        -10,-20,-20,-20,-20,-20,-20,-10,
         20, 20,  0,  0,  0,  0, 20, 20,
         20, 30, 10,  0,  0, 10, 30, 20
    ],
}
# TO-DO: reverse none symetrical piece maps for black

piece_values = {
    0:100, # pawn
    1:300, # knight
    2:300, # bishop
    3:500, # rook
    4:900, # queen
    5:10000 # king
}



pawn_placement_values = [ 
    0,  0,  0,  0,  0,  0,  0,  0,
    50, 50, 50, 50, 50, 50, 50, 50,
    10, 10, 20, 30, 30, 20, 10, 10,
    5,  5, 10, 25, 25, 10,  5,  5,
    0,  0,  0, 20, 20,  0,  0,  0,
    5, -5,-10,  0,  0,-10, -5,  5,
    5, 10, 10,-20,-20, 10, 10,  5,
    0,  0,  0,  0,  0,  0,  0,  0
]
[
    0, 0, 0, 0, 0, 0, 0, 0, 
    5, 10, 10, -20, -20, 10, 10, 5, 
    5, -5, -10, 0, 0, -10, -5, 5, 
    0, 0, 0, 20, 20, 0, 0, 0, 
    5, 5, 10, 25, 25, 10, 5, 5, 
    10, 10, 20, 30, 30, 20, 10, 10, 
    50, 50, 50, 50, 50, 50, 50, 50, 
    0, 0, 0, 0, 0, 0, 0, 0
]
pawn_placement_values.reverse() # revers because the sort is reversed
print(pawn_placement_values)
# https://www.chessprogramming.org/Simplified_Evaluation_Function

# print(evaluate_board(chess.Board()))